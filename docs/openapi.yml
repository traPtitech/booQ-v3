openapi: 3.0.0
info:
  title: booQ-v3
  version: "3.0.0"
  description: booQ-v3サーバーのAPIです。
  contact:
    name: traP
    url: "https://github.com/traPtitech/booQ-v3"
servers:
  - url: "https://booq-v3.trap.jp/api"
    description: production
  - url: "https://booq-dev-v3.trapti.tech/api"
    description: staging
  - url: "http://localhost:8080/api"
    description: local

tags:
  - name: "items"
    description: "物品に関するAPI"
  - name: "comments"
    description: "コメントに関するAPI"
  - name: "likes"
    description: "物品のいいねに関するAPI"
  - name: "owners"
    description: "物品の所有者に関するAPI"
  - name: "borrows"
    description: "物品を借りるフローに関するAPI"
  - name: "files"
    description: "画像アップロードに関するAPI"

paths:
  /items:
    get:
      operationId: getItems
      tags:
        - "items"
      summary: "物品の一覧を取得します。"
      parameters:
        - schema:
            type: "string"
          name: "userId"
          in: "query"
          description: "指定したユーザーの所有する物品一覧を取得します。"
        - schema:
            type: "string"
          name: "search"
          in: "query"
          description: "名称が部分一致する物品一覧を取得します。"
        - schema:
            type: "string"
          name: "rental"
          in: "query"
          description: "指定したユーザーの借りている物品一覧を取得します。"
        - schema:
            type: "integer"
          name: "limit"
          in: "query"
          description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
        - schema:
            type: "integer"
          name: "offset"
          in: "query"
          description: "取得したいデータの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
        # - schema:
        #     type: "integer"
        #   name: "type"
        #   in: "query"
        #   description: "リクエストした物品タイプに合う物品一覧を取得します。"
        - schema:
            type: "array"
            items:
              type: "string"
          name: "tag"
          in: "query"
          description: "リクエストしたタグのついている物品一覧を取得します。"
        - schema:
            type: "array"
            items:
              type: "string"
          name: "tag-exclude"
          in: "query"
          description: "リクエストしたタグのついている物品一覧を除外します"
        - schema:
            type: "string"
          name: "sortby"
          in: "query"
          description: "何の要素でソートするか"

      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/itemSummary"
        "400":
          description: リクエストが不正です
    post:
      operationId: postItem
      tags:
        - "items"
      summary: "物品を新しく登録します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/itemPosted"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itemPosted"
        "400":
          description: "リクエストボディが不正です。"
        "403":
          description: "権限がありません"
  /items/{itemId}:
    parameters:
      - $ref: "#/components/parameters/itemIdInPath"
    get:
      operationId: getItem
      tags:
        - "items"
      summary: "物品の詳細情報を取得します。"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itemDetail"
        "404":
          description: "アイテムが存在しません"
    patch:
      operationId: editItem
      tags:
        - "items"
      summary: "物品の情報を変更します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/itemPosted"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "400":
          description: "リクエストボディが不正です。"
        "404":
          description: "アイテムが存在しません"
    delete:
      operationId: deleteItem
      tags:
        - "items"
      summary: "物品を削除します。"
      responses:
        "200":
          description: "OK"
        "404":
          description: "アイテムが存在しません"
  /items/{itemId}/comments:
    parameters:
      - $ref: "#/components/parameters/itemIdInPath"
    post:
      operationId: postComment
      tags:
        - "comments"
      summary: "コメントを新規作成します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postComment"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"
        "400":
          description: "リクエストボディが不正です。"
        "404":
          description: "アイテムが存在しません"
  /items/{itemId}/owners:
    parameters:
      - $ref: "#/components/parameters/itemIdInPath"
    post:
      operationId: postItemOwners
      tags:
        - "owners"
      summary: "物品の所有者を追加します。"
      description: "他者の所有権を操作する場合は権限が必要です。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postOwnership"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ownership"
        "403":
          description: "権限がありません。"
        "404":
          description: "アイテムが存在しません"
  /items/{itemId}/owners/{ownershipId}:
    parameters:
      - $ref: "#/components/parameters/itemIdInPath"
      - $ref: "#/components/parameters/ownershipIdInPath"
    patch:
      operationId: editItemOwners
      tags:
        - "owners"
      summary: "物品の所有者を編集します。(所有者と管理者のみ)"
      description: "他者の所有権を操作する場合は権限が必要です。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postOwnership"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ownership"
        "403":
          description: "権限がありません。"
        "404":
          description: "アイテムが存在しません"
    delete:
      operationId: deleteItemOwners
      tags:
        - "owners"
      summary: "物品の所有者を削除します"
      description: "他者の所有権を操作する場合は権限が必要です。"
      responses:
        "200":
          description: "OK"
        "403":
          description: "権限がありません。"
        "404":
          description: "アイテムが存在しません"
  /items/{itemId}/borrowing/equipment:
    parameters:
      - $ref: "#/components/parameters/itemIdInPath"
    post:
      operationId: postBorrowEquipment
      tags:
        - "borrows"
      summary: "備品を借ります。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/borrowRequestEquipment"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/borrowRequestEquipment"
        "400":
          description: "リクエストボディが不正です。"
        "404":
          description: "アイテムが存在しません"
  /items/{itemId}/borrowing/equipment/return:
    parameters:
      - $ref: "#/components/parameters/itemIdInPath"
    post:
      operationId: postBorrowEquipmentReturn
      tags:
        - "borrows"
      summary: "備品を返します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/borrowReturn"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/borrowReturn"
        "400":
          description: "リクエストボディが不正です。"
        "404":
          description: "アイテムが存在しません"
  /items/{itemId}/owners/{ownershipId}/borrowings:
    parameters:
      - $ref: "#/components/parameters/itemIdInPath"
      - $ref: "#/components/parameters/ownershipIdInPath"
    post:
      operationId: postBorrow
      tags:
        - "borrows"
      summary: "個人所有物を「借りたい」と意見表明します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/borrowRequest"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/borrowRequest"
        "400":
          description: "リクエストボディが不正です。"
        "404":
          description: "アイテムが存在しません"
  /items/{itemId}/owners/{ownershipId}/borrowings/{borrowingId}:
    parameters:
      - $ref: "#/components/parameters/itemIdInPath"
      - $ref: "#/components/parameters/ownershipIdInPath"
      - $ref: "#/components/parameters/borrowingIdInPath"
    get:
      operationId: getBorrowingById
      tags:
        - "borrows"
      summary: "個人所有物を借りたいという要望を取得します。 (○○日に借りたい、○○日に返す予定、など)"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/borrowing"
        "400":
          description: "リクエストボディが不正です。"
        "404":
          description: "アイテムが存在しません"
  /items/{itemId}/owners/{ownershipId}/borrowings/{borrowingId}/reply:
    parameters:
      - $ref: "#/components/parameters/itemIdInPath"
      - $ref: "#/components/parameters/ownershipIdInPath"
      - $ref: "#/components/parameters/borrowingIdInPath"
    post:
      operationId: postBorrowReply
      tags:
        - "borrows"
      summary: "個人所有物を○○日まで借りたいという要望に対して返答します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/borrowReply"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/borrowReply"
        "400":
          description: "リクエストボディが不正です。"
        "404":
          description: "アイテムが存在しません"
  /items/{itemId}/owners/{ownershipId}/borrowings/{borrowingId}/return:
    parameters:
      - $ref: "#/components/parameters/itemIdInPath"
      - $ref: "#/components/parameters/ownershipIdInPath"
      - $ref: "#/components/parameters/borrowingIdInPath"
    post:
      operationId: postReturn
      tags:
        - "borrows"
      summary: "個人所有物を返します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/borrowReturn"
      responses:
        "200":
          description: "OK"
        "400":
          description: "リクエストボディが不正です。"
        "404":
          description: "アイテムが存在しません"
  /items/{itemId}/likes:
    parameters:
      - $ref: "#/components/parameters/itemIdInPath"
    post:
      operationId: addLike
      tags:
        - "likes"
      summary: "物品にいいねをつけます。"
      description: "すでにいいねしている状態の場合、エラー(400)を返します。"
      responses:
        "201":
          description: "正常にいいねしました"
        "400":
          description: "不正なリクエストです"
        "404":
          description: "指定されたアイテムが存在しません"
    delete:
      operationId: removeLike
      tags:
        - "likes"
      summary: "物品のいいねを取り消します。"
      description: "すでに所有済み状態の場合、エラー(400)を返します。"
      responses:
        "200":
          description: "正常に削除しました"
        "400":
          description: "不正なリクエストです"
        "404":
          description: "指定されたアイテムが存在しません"
  /files:
    post:
      operationId: postFile
      tags:
        - "files"
      summary: "画像ファイルをアップロードします。"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
                  description: "3MBまでのJPG, PNGファイル"
      responses:
        "201":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/file"
        "400":
          description: "不正なリクエストです。"
  /files/{fileId}:
    parameters:
      - $ref: "#/components/parameters/fileIdInPath"
    get:
      operationId: getFile
      tags:
        - "files"
      summary: "画像ファイルをダウンロードします。"
      responses:
        "200":
          description: "OK"
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        "404":
          description: "ファイルが存在しません。"

components:
  parameters:
    itemIdInPath:
      name: itemId
      in: path
      required: true
      description: アイテムID
      schema:
        type: integer
    ownershipIdInPath:
      name: ownershipId
      in: path
      required: true
      description: 所有権ID
      schema:
        type: integer
    borrowingIdInPath:
      name: borrowingId
      in: path
      required: true
      description: 所有権ID
      schema:
        type: integer
    fileIdInPath:
      name: fileId
      in: path
      required: true
      description: ファイルID
      schema:
        type: integer
    tagIdInPath:
      name: tagId
      in: path
      required: true
      description: tagID
      schema:
        type: integer
  schemas:
    isBook:
      type: integer
      title: isBook
      description: |-
        アイテム種別
        0: 本でない
        1: 本
      enum:
        - 0
        - 1
      x-enum-varnames:
        - notBook
        - book
      x-enum-descriptions:
        - 本ではない物品
        - 本
    isEquipment:
      type: integer
      title: isEquipment
      description: |-
        アイテム種別
        0: 個人所有
        1: 備品
      enum:
        - 0
        - 1
      x-enum-varnames:
        - individual
        - equipment
      x-enum-descriptions:
        - 個人所有
        - 備品
    itemPosted:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        name:
          type: "string"
          example: "小説　天気の子"
        isTrapItem:
          $ref: "#/components/schemas/isEquipment"
          example: 0
        isBook:
          $ref: "#/components/schemas/isBook"
          example: 1
        count:
          type: "integer"
          example: 100
        code:
          type: "string"
          example: "9784041026403"
        tags:
          type: "array"
          items:
            type: "string"
        description:
          type: "string"
          example: "高校1年の夏、帆高（ほだか）は離島から家出し、東京にやってきた。連日降り続ける雨の中、雑踏ひしめく都会の片隅で、帆高は不思議な能力を持つ少女・陽菜（ひな）に出会う。「ねぇ、今から晴れるよ」。それは祈るだけで、空を晴れに出来る力だった――。天候の調和が狂っていく時代に、運命に翻弄される少年と少女が自らの生き方を「選択」する物語。長編アニメーション映画『天気の子』の、新海誠監督自身が執筆した原作小説。"
        imgUrl:
          type: "string"
          example: "https://cover.openbd.jp/9784041026403.jpg"
          default: ""
        createdAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
        deletedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
          nullable: true
      required:
        - id
        - name
        - isTrapItem
        - isBook
        - description
        - imgUrl
        - createdAt
        - updatedAt
        - deletedAt
    item:
      allOf:
        - $ref: "#/components/schemas/itemPosted"
        - type: "object"
          properties:
            tags:
              type: "array"
              items:
                $ref: "#/components/schemas/tag"
              readOnly: true
            comments:
              type: "array"
              items:
                $ref: "#/components/schemas/comment"
              readOnly: true
          oneOf:
            - properties:
                count:
                  type: "integer"
                countMax:
                  type: "integer"
              required: ["count", "countMax"]
            - properties:
                ownerships:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/ownership"
              required: ["ownerships"]
          required:
            - transactions
            - tags
            - comments
    itemSummary:
      allOf:
        - $ref: "#/components/schemas/item"
        - type: "object"
          properties:
            likeCounts:
              type: "integer"
              example: 1
              readOnly: true
            isLiked:
              type: "boolean"
              example: true
              readOnly: true
          required:
            - likeCounts
            - isLiked
    itemDetail:
      allOf:
        - $ref: "#/components/schemas/item"
        - type: "object"
          properties:
            likesByUsers:
              type: "array"
              items:
                type: "string"
                example: "s9"
              readOnly: true
          oneOf:
            - properties:
                transactionsEquipment:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/transactionEquipment"
              required: ["transactionsEquipment"]
            - properties:
                transactions:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/transaction"
              required: ["transactions"]
          required:
            - likes
    comment:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        itemId:
          type: "integer"
          example: 1
          readOnly: true
        item:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/itemSummary"
        userId:
          type: "string"
          example: "s9"
          readOnly: true
        text:
          type: "string"
          example: "小説版は夏美の心理描写がよく描かれていて、映画版を補完するものになっている。あとがきと解説だけでも読む価値はあると思います。"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
        deletedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
          nullable: true
      required:
        - id
        - itemId
        - userId
        - item
        - text
        - createdAt
        - updatedAt
        - deletedAt
    postComment:
      type: "object"
      properties:
        text:
          type: "string"
          example: "小説版は夏美の心理描写がよく描かれていて、映画版を補完するものになっている。あとがきと解説だけでも読む価値はあると思います。"
      required:
        - text
    transaction:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        ownershipId:
          type: "integer"
          example: 1
          readOnly: true
        userId:
          type: "string"
          example: "s9"
          readOnly: true
        status:
          type: "integer"
          example: 1
          readOnly: true
          description: "0=リクエスト済み、1=貸し出し中、2=返却済み、3=貸し出し拒否"
        purpose:
          type: "string"
          example: "読みたかったから。"
        message:
          type: "string"
          example: "2/17に部室でお貸しします"
        returnMessage:
          type: "string"
          example: "ずっと読みたかったんですよね。ありがとう！"
        due_date:
          type: "string"
          format: "date"
          example: "2024-02-16"
        checkout_date:
          type: "string"
          format: "date"
          example: "2024-02-16"
        return_date:
          type: "string"
          format: "date"
          example: "2024-02-16"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
        deletedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
          nullable: true
      required:
        - id
        - ownershipId
        - userId
        - status
        - message
        - returnMessage
        - due_date
        - checkout_date
        - return_date
        - createdAt
        - updatedAt
        - deletedAt
    transactionEquipment:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        itemId:
          type: "integer"
          example: 1
          readOnly: true
        userId:
          type: "string"
          example: "s9"
          readOnly: true
        status:
          type: "integer"
          example: 1
          readOnly: true
          description: "0=リクエスト済み、1=貸し出し中、2=返却済み、3=貸し出し拒否"
        purpose:
          type: "string"
          example: "読みたかったから。"
        due_date:
          type: "string"
          format: "date"
          example: "2024-02-16"
        return_date:
          type: "string"
          format: "date"
          example: "2024-02-16"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
        deletedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
          nullable: true
      required:
        - id
        - ownershipId
        - userId
        - status
        - message
        - returnMessage
        - due_date
        - checkout_date
        - return_date
        - createdAt
        - updatedAt
        - deletedAt
    borrowRequest:
      type: "object"
      properties:
        propose:
          type: "string"
          example: "読みたかったから。"
        dueDate:
          type: "string"
          format: "date"
          example: "2024-02-16"
        borrowInClubRoom:
          type: "boolean"
          example: "true"
      required:
        - dueDate
        - borrowInClubRoom
    borrowRequestEquipment:
      type: "object"
      properties:
        propose:
          type: "string"
          example: "読みたかったから。"
        count:
          type: "integer"
          example: 1
        dueDate:
          type: "string"
          format: "date"
          example: "2024-02-16"
        borrowInClubRoom:
          type: "boolean"
          example: "true"
      required:
        - dueDate
        - borrowInClubRoom
    borrowing:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        propose:
          type: "string"
          example: "読みたかったから。"
        dueDate:
          type: "string"
          format: "date"
          example: "2024-02-16"
        borrowInClubRoom:
          type: "boolean"
          example: "true"
      required:
        - id
        - dueDate
        - borrowInClubRoom
    borrowReply:
      type: "object"
      properties:
        answer:
          type: "boolean"
          example: "true"
        comment:
          type: "string"
          example: "2/20に部室に置きます"
      required:
        - answer
        - comment
    borrowReturn:
      type: "object"
      properties:
        text:
          type: "string"
          example: "ありがとうございました。面白かったです"
      required:
        - text
    ownership:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        itemId:
          type: "integer"
          example: 1
          readOnly: true
        userId:
          type: "string"
          example: "s9"
        rentalable:
          type: "boolean"
          example: true
        memo:
          type: "string"
          example: "おもしろいのでぜひ読んでください"
      required:
        - id
        - itemId
        - userId
        - rentalable
        - memo
    postOwnership:
      type: "object"
      properties:
        userId:
          type: "string"
          example: "s9"
        rentalable:
          type: "boolean"
          example: true
        memo:
          type: "string"
          example: "読んでください"
      required:
        - userId
        - rentalable
        - memo
    tag:
      type: "object"
      properties:
        name:
          type: "string"
          example: "小説"
      required:
        - name
    owner:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        ownerId:
          type: "integer"
          example: 1
        userId:
          type: "string"
          example: "s9"
        rentalable:
          type: "boolean"
          example: true
        count:
          type: "integer"
          example: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
        deletedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
      required:
        - id
        - ownerId
        - userId
        - rentalable
        - count
        - createdAt
        - updatedAt
        - deletedAt
    file:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          description: "ファイルID"
        url:
          type: "string"
          example: "/api/files/1"
          description: "ファイルURL"
      required:
        - id
        - url
